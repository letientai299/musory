{"version":3,"file":"static/js/229.42729533.chunk.js","mappings":"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","sources":["components/AudioWave.tsx","util/notes.ts","components/PitchDetector.tsx","pages/Sight.tsx","components/SingleNote.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\ntype AudioWaveProps = {\n  analyzer: AnalyserNode | undefined\n  samplingStep?: number\n}\n\n// Thank to https://alexanderell.is/posts/tuner/\nfunction draw(\n  ctx: CanvasRenderingContext2D,\n  analyzer: AnalyserNode,\n  step: number\n) {\n  const height = ctx.canvas.height\n  const width = ctx.canvas.width\n\n  ctx.lineWidth = 1\n  ctx.strokeStyle = 'rgb(0, 0, 0)'\n  const bufferLength = analyzer.fftSize\n  const data = new Uint8Array(bufferLength)\n  const sliceWidth = width / bufferLength\n\n  const visualize = () => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    requestAnimationFrame(visualize)\n\n    analyzer.getByteTimeDomainData(data)\n\n    ctx.beginPath()\n    let x = 0\n    for (let i = 0; i < bufferLength; i += step) {\n      const v = data[i] / 128.0\n      const y = (v * height) / 2\n\n      if (i === 0) {\n        ctx.moveTo(x, y)\n      } else {\n        ctx.lineTo(x, y)\n      }\n      x += sliceWidth * step\n    }\n\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2)\n    ctx.stroke()\n  }\n\n  visualize()\n}\n\nexport const AudioWave = (p: AudioWaveProps) => {\n  const canvas = useRef<HTMLCanvasElement>(null)\n  useEffect(() => {\n    const ctx = canvas.current?.getContext('2d') as CanvasRenderingContext2D\n    if (p.analyzer) {\n      let step = p.samplingStep\n      if (!step || step < 0) {\n        step = 1\n      }\n      draw(ctx, p.analyzer, step)\n    }\n  })\n\n  return (\n    <div className=\"border h-40 w-full\">\n      <canvas ref={canvas} className=\"w-full h-full min-h-full\"></canvas>\n    </div>\n  )\n}\n","import { Note } from '@tonaljs/tonal'\n\nconst tonesNum = 12 // also same as notes.length\nconst notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\nconst a4Freq = 440\nconst a4KeyNumberOnPiano = 60 // array start at 0!\n\nconst Notes = {\n  fromFrequency: (freq: number): string => {\n    const noteNum = tonesNum * (Math.log(freq / a4Freq) / Math.log(2))\n    const i = Math.round(noteNum) + a4KeyNumberOnPiano\n    const name = notes[i % notes.length]\n\n    // hardcoded with special handling because JS number is inaccurate\n    let octave = Math.ceil(i / tonesNum) - 1\n    if (name == 'A#' || name == 'B') {\n      octave--\n    }\n    return `${name}${octave}`\n  },\n\n  ClefBass: 'bass',\n  ClefTreble: 'treble',\n  preferredClef: (name: string): string => {\n    const oct = Note.octave(name)\n    return !oct || oct >= 4 ? Notes.ClefTreble : Notes.ClefBass\n  },\n}\n\nexport default Notes\n","import { RefObject, useEffect, useRef } from 'react'\nimport Notes from '../util/notes'\nimport { Note } from '@tonaljs/tonal'\nimport { throttle } from 'lodash'\n\ntype PitchDetectorProps = {\n  analyzer: AnalyserNode | undefined\n  onNoteDetected?: (name: string) => void\n}\n\n// Must be called on analyser.getFloatTimeDomainData and audioContext.sampleRate\n// From https://github.com/cwilso/PitchDetect/pull/23\n// Code is copied from the version at https://alexanderell.is/posts/tuner/\nfunction autoCorrelate(buffer: Float32Array, sampleRate: number): number {\n  // Perform a quick root-mean-square to see if we have enough signal\n  let SIZE = buffer.length\n  let sumOfSquares = 0\n  for (let i = 0; i < SIZE; i++) {\n    const val = buffer[i]\n    sumOfSquares += val * val\n  }\n  const rootMeanSquare = Math.sqrt(sumOfSquares / SIZE)\n  if (rootMeanSquare < 0.01) {\n    return -1\n  }\n\n  // Find a range in the buffer where the values are below a given threshold.\n  let r1 = 0\n  let r2 = SIZE - 1\n  const threshold = 0.2\n\n  // Walk up for r1\n  for (let i = 0; i < SIZE / 2; i++) {\n    if (Math.abs(buffer[i]) < threshold) {\n      r1 = i\n      break\n    }\n  }\n\n  // Walk down for r2\n  for (let i = 1; i < SIZE / 2; i++) {\n    if (Math.abs(buffer[SIZE - i]) < threshold) {\n      r2 = SIZE - i\n      break\n    }\n  }\n\n  // Trim the buffer to these ranges and update SIZE.\n  buffer = buffer.slice(r1, r2)\n  SIZE = buffer.length\n\n  // Create a new array of the sums of offsets to do the auto-correlation\n  const c = new Array(SIZE).fill(0)\n  // For each potential offset, calculate the sum of each buffer value times its offset value\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE - i; j++) {\n      c[i] = c[i] + buffer[j] * buffer[j + i]\n    }\n  }\n\n  // Find the last index where that value is greater than the next one (the dip)\n  let d = 0\n  while (c[d] > c[d + 1]) {\n    d++\n  }\n\n  // Iterate from that index through the end and find the maximum sum\n  let maxValue = -1\n  let maxIndex = -1\n  for (let i = d; i < SIZE; i++) {\n    if (c[i] > maxValue) {\n      maxValue = c[i]\n      maxIndex = i\n    }\n  }\n\n  let T0 = maxIndex\n\n  // Not as sure about this part, don't @ me\n  // From the original author:\n  // interpolation is parabolic interpolation. It helps with precision. We suppose that a parabola pass through the\n  // three points that comprise the peak. 'a' and 'b' are the unknowns from the linear equation system and b/(2a) is\n  // the \"error\" in the abscissa. Well x1,x2,x3 should be y1,y2,y3 because they are the ordinates.\n  const x1 = c[T0 - 1]\n  const x2 = c[T0]\n  const x3 = c[T0 + 1]\n\n  const a = (x1 + x3 - 2 * x2) / 2\n  const b = (x3 - x1) / 2\n  if (a) {\n    T0 = T0 - b / (2 * a)\n  }\n\n  return sampleRate / T0\n}\n\nfunction detect(\n  analyzer: AnalyserNode,\n  note: RefObject<HTMLParagraphElement>,\n  freq: RefObject<HTMLParagraphElement>,\n  onNoteDetected?: (name: string) => void\n) {\n  let lastname = ''\n  let lastPitch = -100\n  let smoothingCount = 0\n  let smoothingThreshold = 5\n  let lastNotifiedAt = 0\n  const ignoreRange = 3\n  const smoothingCountThreshold = 8\n  const data = new Float32Array(analyzer.fftSize)\n\n  const visualize = () => {\n    if (!note || !freq || !note.current || !freq.current) {\n      return\n    }\n    requestAnimationFrame(visualize)\n\n    analyzer.getFloatTimeDomainData(data)\n    const pitch = autoCorrelate(data, analyzer.context.sampleRate)\n    if (Number.isNaN(pitch) || pitch < 0) {\n      return\n    }\n\n    const isSimilar = Math.abs(pitch - lastPitch) < smoothingThreshold\n    if (isSimilar) {\n      if (smoothingCount < smoothingCountThreshold) {\n        smoothingCount++\n        return\n      } else {\n        lastPitch = pitch\n        smoothingCount = 0\n        lastname = Notes.fromFrequency(pitch)\n        note.current.innerText = lastname\n        freq.current.innerText = `${pitch.toFixed(2)} Hz`\n        const now = new Date().getTime()\n        if (now - lastNotifiedAt >= 500) {\n          onNoteDetected?.(lastname)\n          lastNotifiedAt = now\n        }\n      }\n    } else {\n      lastPitch = pitch\n      lastname = Notes.fromFrequency(pitch)\n      const note = Note.get(lastname)\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const down = Note.fromMidi(note.midi! - ignoreRange)\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      smoothingThreshold = note.freq! - Note.midi(down)!\n      smoothingCount = 0\n      lastNotifiedAt = 0\n      return\n    }\n  }\n\n  visualize()\n}\n\nexport const PitchDetector = (p: PitchDetectorProps) => {\n  const note = useRef<HTMLParagraphElement>(null)\n  const freq = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    if (p.analyzer) {\n      const cb = throttle((name: string) => {\n        p.onNoteDetected?.(name)\n      }, 150)\n      detect(p.analyzer, note, freq, cb)\n    }\n  })\n\n  return (\n    <div\n      className={\n        'font-bold text-center ' + (!p.analyzer ? 'text-gray-400' : '')\n      }\n    >\n      <p ref={note} className=\"text-6xl\">\n        --\n      </p>\n      <p ref={freq} className=\"text-sl\">\n        -- Hz\n      </p>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { BsMicFill, BsMicMuteFill } from 'react-icons/bs'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport { AudioWave } from '../components/AudioWave'\nimport { PitchDetector } from '../components/PitchDetector'\nimport SingleNote from '../components/SingleNote'\nimport { Note } from '@tonaljs/tonal'\nimport { DebounceInput } from 'react-debounce-input'\nimport { MidiNumbers, Piano } from 'react-piano'\nimport 'react-piano/dist/styles.css'\nimport { Synth } from 'tone'\nimport { Card } from '../components/Card'\nimport { GiPianoKeys, GiSoundWaves } from 'react-icons/gi'\n\nenum InputMode {\n  Sound,\n  Keyboard,\n}\n\nconst genNote = (low: string, high: string): string => {\n  const lowMidi = Note.midi(low)\n  const highMidi = Note.midi(high)\n  if (!lowMidi || !highMidi) {\n    return 'A4'\n  }\n  const midi = lowMidi + Math.floor(Math.random() * (highMidi - lowMidi))\n  const note = Note.fromMidi(midi)\n  return note.replaceAll('b', '').replaceAll('#', '')\n}\n\nconst Sight = () => {\n  const [inputMode, setInputMode] = useState(InputMode.Keyboard)\n  const [listening, setListening] = useState(false)\n  const [lowNote, setLowNote] = useState('C4')\n  const [highNote, setHighNote] = useState('C5')\n\n  const [note, setNote] = useState(genNote(lowNote, highNote))\n  const [audio, setAudio] = useState<{\n    stream: MediaStream | undefined\n    analyzer: AnalyserNode | undefined\n  }>()\n\n  useHotkeys('Space', () => setListening((pre) => !pre))\n\n  function mute() {\n    audio?.analyzer?.disconnect()\n    audio?.stream?.getTracks().forEach((t) => t.stop())\n    setAudio({\n      stream: undefined,\n      analyzer: undefined,\n    })\n  }\n\n  useEffect(() => {\n    if (!listening) {\n      mute()\n      return\n    }\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const audioContext = new window.AudioContext()\n      const analyzer = new AnalyserNode(audioContext, {\n        minDecibels: -70,\n        maxDecibels: -20,\n      })\n      audioContext.createMediaStreamSource(stream).connect(analyzer)\n      setAudio({\n        stream: stream,\n        analyzer: analyzer,\n      })\n    })\n\n    return mute\n  }, [listening])\n\n  function onNoteDetected(detected: string) {\n    let correct = false\n    if (inputMode == InputMode.Sound) {\n      const midi = Note.midi(note)\n      const detectedMidi = Note.midi(detected)\n      if (detectedMidi == midi) {\n        correct = true\n      }\n    } else {\n      correct = detected[0].toLowerCase() == note[0].toLowerCase()\n    }\n\n    if (!correct) {\n      return\n    }\n\n    console.log(detected, note, correct)\n    setNote(genNote(lowNote, highNote))\n  }\n\n  function getInputControl(mode: InputMode) {\n    if (mode == InputMode.Sound) {\n      return (\n        <>\n          <button\n            id=\"btn-play\"\n            className={\n              'text-6xl ' +\n              (!listening ? 'text-gray-400' : '') +\n              ' hover:text-cyan-500'\n            }\n            onMouseDown={() => setListening((pre) => !pre)}\n          >\n            {listening ? <BsMicMuteFill /> : <BsMicFill />}\n          </button>\n          <AudioWave analyzer={audio?.analyzer} samplingStep={10} />\n          <PitchDetector\n            analyzer={audio?.analyzer}\n            onNoteDetected={onNoteDetected}\n          />\n          <article className=\"prose\">\n            <ul>\n              <li>\n                Press <kbd>Space</kbd> to toggle pitch detection via microphone.\n              </li>\n            </ul>\n          </article>\n        </>\n      )\n    }\n\n    const first = MidiNumbers.fromNote('C4')\n    const last = MidiNumbers.fromNote('B4')\n    // note in C4 range\n    const shortcuts = [\n      { key: 'c', midiNumber: 60 },\n      { key: 'd', midiNumber: 62 },\n      { key: 'e', midiNumber: 64 },\n      { key: 'f', midiNumber: 65 },\n      { key: 'g', midiNumber: 67 },\n      { key: 'a', midiNumber: 69 },\n      { key: 'b', midiNumber: 71 },\n    ]\n\n    const synth = new Synth().toDestination()\n\n    return (\n      <div className=\"w-full h-64\">\n        <Piano\n          noteRange={{ first: first, last: last }}\n          keyboardShortcuts={shortcuts}\n          playNote={(midi: number) => {\n            const name = Note.fromMidi(midi)\n            synth.triggerAttackRelease(name, 0.05)\n            onNoteDetected(name)\n          }}\n          stopNote={() => {\n            return\n          }}\n        />\n        <div className={'flex flex-col items-center'}>\n          <article className=\"prose\">\n            <ul>\n              <li>Press the letter to name the note</li>\n            </ul>\n          </article>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"m-auto flex flex-col items-center\">\n      <div className={'flex flex-row w-full mb-12'}>\n        <div\n          className={\n            'flex flex-row flex-wrap items-center basis-1/2 justify-center space-x-2'\n          }\n        >\n          <p className={''}>Lowest note</p>\n          <DebounceInput\n            value={lowNote}\n            debounceTimeout={500}\n            onChange={(e) => setLowNote(e.target.value)}\n            className={'border border-cyan-500 w-12 text-center'}\n          />\n          <SingleNote name={lowNote} />\n        </div>\n\n        <div\n          className={\n            'flex flex-wrap flex-row items-center basis-1/2 justify-center space-x-2'\n          }\n        >\n          <p>Highest note</p>\n          <DebounceInput\n            value={highNote}\n            debounceTimeout={500}\n            onChange={(e) => setHighNote(e.target.value)}\n            className={'border border-cyan-500 w-12 text-center'}\n          />\n          <SingleNote name={highNote} />\n        </div>\n      </div>\n\n      <SingleNote name={note} scale={3} />\n\n      <div className={'flex flex-row flex-nowrap w-full'}>\n        <div\n          className={`basic-1/2 h-full ${\n            inputMode == InputMode.Keyboard ? 'text-cyan-500' : ''\n          }`}\n          onClick={() => setInputMode(InputMode.Keyboard)}\n        >\n          <Card\n            name={'Virtual keyboard'}\n            description={\n              'Name the key with virtual keyboard, can type the key using laptop keyboard'\n            }\n            icon={<GiPianoKeys />}\n          />\n        </div>\n\n        <div\n          className={`basic-1/2 h-full ${\n            inputMode == InputMode.Sound ? 'text-cyan-500' : ''\n          }`}\n          onClick={() => setInputMode(InputMode.Sound)}\n        >\n          <Card\n            name={'Pitch detection'}\n            description={\n              'Using microphone to detect note name from sound. ' +\n              'WARNING: slow and not very correct!'\n            }\n            icon={<GiSoundWaves />}\n          />\n        </div>\n      </div>\n\n      {getInputControl(inputMode)}\n    </div>\n  )\n}\n\nexport default Sight\n","import { useEffect, useRef } from 'react'\nimport Notes from '../util/notes'\n\nimport {\n  Accidental,\n  Formatter,\n  Renderer,\n  Stave,\n  StaveNote,\n  Voice,\n} from 'vexflow'\nimport { Note } from '@tonaljs/tonal'\n\ntype SingleNoteProps = {\n  /** Name of the note, e.g: A2, Bb4, ... */\n  name: string // name of the note to be rendered\n  /**\n   * Preferred clef to put the note on sheet music.\n   * If not provided, then it's auto calculated.\n   * The result should contain the least ledger lines.\n   */\n  clef?: string\n  readonly scale?: number\n}\n\nconst defaultScaleFactor = 1\nconst paddingX = 10\n\n/**\n *  SingleNote renders a single note on the sheet music,\n */\nconst SingleNote = (p: SingleNoteProps) => {\n  const sheet = useRef<HTMLDivElement>(null)\n  const detectClef = (p: SingleNoteProps): string => {\n    return p.clef\n      ? p.clef\n      : p.name\n      ? Notes.preferredClef(p.name)\n      : Notes.ClefTreble\n  }\n  const scaleFactor = p.scale ? p.scale : defaultScaleFactor\n\n  const renderStave = (div: HTMLDivElement, clef: string): Stave => {\n    const divStyle = window.getComputedStyle(div)\n    const w = Number.parseInt(divStyle.width)\n    const h = 150 * scaleFactor\n\n    const renderer = new Renderer(div, Renderer.Backends.SVG)\n    renderer.resize(w, h)\n    const ctx = renderer.getContext()\n\n    ctx.scale(scaleFactor, scaleFactor)\n\n    const stave = new Stave(paddingX, 0, w / scaleFactor - 2 * paddingX)\n    stave.addClef(clef)\n    stave.setContext(ctx).draw()\n    return stave\n  }\n\n  useEffect(() => {\n    if (!sheet || !sheet.current) {\n      return\n    }\n\n    const clef = detectClef(p)\n    const div = sheet.current\n    const reset = () => {\n      div.childNodes.forEach((n) => div.removeChild(n))\n    }\n    reset()\n\n    const stave = renderStave(div, clef)\n\n    if (!p.name) {\n      return reset // no note to draw\n    }\n\n    const voice = new Voice()\n    voice.setMode(Voice.Mode.FULL)\n\n    const note = Note.get(p.name)\n    const staveNote = new StaveNote({\n      keys: [`${note.letter}${note.acc ? note.acc : ''}/${note.oct}`],\n      duration: 'q',\n      clef: clef,\n      auto_stem: true,\n      align_center: true,\n    })\n\n    // hard-coded the padding value to make the note center,\n    // until we know how to calculate exact note and accidental size.\n    let notePadding = 70\n    if (note.acc) {\n      staveNote.addModifier(new Accidental(note.acc))\n      notePadding = 50\n    }\n\n    voice.addTickable(staveNote)\n\n    const measureWidth = stave.getWidth() - notePadding\n    new Formatter().joinVoices([voice]).format([voice], measureWidth)\n    voice.draw(stave.getContext(), stave)\n    return reset\n  }, [sheet, p.name])\n\n  return <div ref={sheet} className={'w-full'} />\n}\n\nexport default SingleNote\n"],"names":["AudioWave","p","canvas","useRef","useEffect","ctx","current","getContext","analyzer","step","samplingStep","height","width","lineWidth","strokeStyle","bufferLength","fftSize","data","Uint8Array","sliceWidth","visualize","clearRect","requestAnimationFrame","getByteTimeDomainData","beginPath","x","i","y","moveTo","lineTo","stroke","draw","className","ref","notes","Notes","fromFrequency","freq","noteNum","Math","log","round","name","length","octave","ceil","ClefBass","ClefTreble","preferredClef","oct","Note","detect","note","onNoteDetected","lastname","lastPitch","smoothingCount","smoothingThreshold","lastNotifiedAt","Float32Array","getFloatTimeDomainData","pitch","buffer","sampleRate","SIZE","sumOfSquares","val","sqrt","r1","r2","abs","slice","c","Array","fill","j","d","maxValue","maxIndex","T0","x1","x2","x3","a","autoCorrelate","context","Number","isNaN","down","midi","innerText","toFixed","now","Date","getTime","InputMode","PitchDetector","cb","throttle","sheet","scaleFactor","scale","clef","detectClef","div","reset","childNodes","forEach","n","removeChild","stave","divStyle","window","getComputedStyle","w","parseInt","h","renderer","Renderer","resize","Stave","addClef","setContext","renderStave","voice","Voice","setMode","staveNote","StaveNote","keys","letter","acc","duration","auto_stem","align_center","notePadding","addModifier","Accidental","addTickable","measureWidth","getWidth","Formatter","joinVoices","format","genNote","low","high","lowMidi","highMidi","floor","random","replaceAll","useState","Keyboard","inputMode","setInputMode","listening","setListening","lowNote","setLowNote","highNote","setHighNote","setNote","audio","setAudio","mute","disconnect","stream","getTracks","t","stop","undefined","detected","correct","Sound","toLowerCase","console","useHotkeys","pre","navigator","mediaDevices","getUserMedia","then","audioContext","AudioContext","AnalyserNode","minDecibels","maxDecibels","createMediaStreamSource","connect","DebounceInput","value","debounceTimeout","onChange","e","target","onClick","Card","description","icon","mode","id","onMouseDown","first","MidiNumbers","last","synth","Synth","toDestination","noteRange","keyboardShortcuts","key","midiNumber","playNote","triggerAttackRelease","stopNote","getInputControl"],"sourceRoot":""}