{"version":3,"file":"static/js/833.b122c2d2.chunk.js","mappings":"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","sources":["components/AudioWave.tsx","util/notes.ts","components/PitchDetector.tsx","pages/Sight.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\ntype AudioWaveProps = {\n  analyzer: AnalyserNode | undefined\n  samplingStep?: number\n}\n\n// Thank to https://alexanderell.is/posts/tuner/\nfunction draw(\n  ctx: CanvasRenderingContext2D,\n  analyzer: AnalyserNode,\n  step: number\n) {\n  const height = ctx.canvas.height\n  const width = ctx.canvas.width\n\n  ctx.lineWidth = 1\n  ctx.strokeStyle = 'rgb(0, 0, 0)'\n\n  const visualize = () => {\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n    requestAnimationFrame(visualize)\n\n    const bufferLength = analyzer.fftSize\n    const data = new Uint8Array(bufferLength)\n    analyzer.getByteTimeDomainData(data)\n\n    ctx.beginPath()\n    const sliceWidth = width / bufferLength\n    let x = 0\n    for (let i = 0; i < bufferLength; i += step) {\n      const v = data[i] / 128.0\n      const y = (v * height) / 2\n\n      if (i === 0) {\n        ctx.moveTo(x, y)\n      } else {\n        ctx.lineTo(x, y)\n      }\n      x += sliceWidth * step\n    }\n\n    ctx.lineTo(ctx.canvas.width, ctx.canvas.height / 2)\n    ctx.stroke()\n  }\n\n  visualize()\n}\n\nexport const AudioWave = (p: AudioWaveProps) => {\n  const canvas = useRef<HTMLCanvasElement>(null)\n  useEffect(() => {\n    const ctx = canvas.current?.getContext('2d') as CanvasRenderingContext2D\n    if (p.analyzer) {\n      let step = p.samplingStep\n      if (!step || step < 0) {\n        step = 1\n      }\n      draw(ctx, p.analyzer, step)\n    }\n  })\n\n  return (\n    <div className=\"border h-40 w-full\">\n      <canvas ref={canvas} className=\"w-full h-full min-h-full\"></canvas>\n    </div>\n  )\n}\n","const tonesNum = 12 // also same as notes.length\nconst notes = ['A', 'A#', 'B', 'C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#']\nconst a4Freq = 440\nconst a4KeyNumberOnPiano = 60 // array start at 0!\n\nconst Notes = {\n  fromFrequency: (freq: number): string => {\n    const noteNum = tonesNum * (Math.log(freq / a4Freq) / Math.log(2))\n    const i = Math.round(noteNum) + a4KeyNumberOnPiano\n    const name = notes[i % notes.length]\n\n    // hardcoded with special handling because JS number is inaccurate\n    let octave = Math.ceil(i / tonesNum) - 1\n    if (name == 'A#' || name == 'B') {\n      octave--\n    }\n    return `${name}${octave}`\n  },\n}\n\nexport default Notes\n","import { RefObject, useEffect, useRef } from 'react'\nimport Notes from '../util/notes'\n\ntype PitchDetectorProps = {\n  analyzer: AnalyserNode | undefined\n}\n\n// Must be called on analyser.getFloatTimeDomainData and audioContext.sampleRate\n// From https://github.com/cwilso/PitchDetect/pull/23\n// Code is copied from the version at https://alexanderell.is/posts/tuner/\nfunction autoCorrelate(buffer: Float32Array, sampleRate: number): number {\n  // Perform a quick root-mean-square to see if we have enough signal\n  let SIZE = buffer.length\n  let sumOfSquares = 0\n  for (let i = 0; i < SIZE; i++) {\n    const val = buffer[i]\n    sumOfSquares += val * val\n  }\n  const rootMeanSquare = Math.sqrt(sumOfSquares / SIZE)\n  if (rootMeanSquare < 0.01) {\n    return -1\n  }\n\n  // Find a range in the buffer where the values are below a given threshold.\n  let r1 = 0\n  let r2 = SIZE - 1\n  const threshold = 0.2\n\n  // Walk up for r1\n  for (let i = 0; i < SIZE / 2; i++) {\n    if (Math.abs(buffer[i]) < threshold) {\n      r1 = i\n      break\n    }\n  }\n\n  // Walk down for r2\n  for (let i = 1; i < SIZE / 2; i++) {\n    if (Math.abs(buffer[SIZE - i]) < threshold) {\n      r2 = SIZE - i\n      break\n    }\n  }\n\n  // Trim the buffer to these ranges and update SIZE.\n  buffer = buffer.slice(r1, r2)\n  SIZE = buffer.length\n\n  // Create a new array of the sums of offsets to do the autocorrelation\n  const c = new Array(SIZE).fill(0)\n  // For each potential offset, calculate the sum of each buffer value times its offset value\n  for (let i = 0; i < SIZE; i++) {\n    for (let j = 0; j < SIZE - i; j++) {\n      c[i] = c[i] + buffer[j] * buffer[j + i]\n    }\n  }\n\n  // Find the last index where that value is greater than the next one (the dip)\n  let d = 0\n  while (c[d] > c[d + 1]) {\n    d++\n  }\n\n  // Iterate from that index through the end and find the maximum sum\n  let maxValue = -1\n  let maxIndex = -1\n  for (let i = d; i < SIZE; i++) {\n    if (c[i] > maxValue) {\n      maxValue = c[i]\n      maxIndex = i\n    }\n  }\n\n  let T0 = maxIndex\n\n  // Not as sure about this part, don't @ me\n  // From the original author:\n  // interpolation is parabolic interpolation. It helps with precision. We suppose that a parabola pass through the\n  // three points that comprise the peak. 'a' and 'b' are the unknowns from the linear equation system and b/(2a) is\n  // the \"error\" in the abscissa. Well x1,x2,x3 should be y1,y2,y3 because they are the ordinates.\n  const x1 = c[T0 - 1]\n  const x2 = c[T0]\n  const x3 = c[T0 + 1]\n\n  const a = (x1 + x3 - 2 * x2) / 2\n  const b = (x3 - x1) / 2\n  if (a) {\n    T0 = T0 - b / (2 * a)\n  }\n\n  return sampleRate / T0\n}\n\nfunction detect(\n  analyzer: AnalyserNode,\n  note: RefObject<HTMLParagraphElement>,\n  freq: RefObject<HTMLParagraphElement>\n) {\n  const visualize = () => {\n    requestAnimationFrame(visualize)\n    if (!note || !freq || !note.current || !freq.current) {\n      return\n    }\n\n    const data = new Float32Array(analyzer.fftSize)\n    analyzer.getFloatTimeDomainData(data)\n    const pitch = autoCorrelate(data, analyzer.context.sampleRate)\n    if (Number.isNaN(pitch) || pitch < 0) {\n      return\n    }\n\n    note.current.innerText = Notes.fromFrequency(pitch)\n    freq.current.innerText = `${pitch.toFixed(2)} Hz`\n  }\n\n  visualize()\n}\n\nexport const PitchDetector = (p: PitchDetectorProps) => {\n  const note = useRef<HTMLParagraphElement>(null)\n  const freq = useRef<HTMLParagraphElement>(null)\n\n  useEffect(() => {\n    if (p.analyzer) {\n      detect(p.analyzer, note, freq)\n    }\n  })\n\n  return (\n    <div\n      className={\n        'font-bold text-center ' + (!p.analyzer ? 'text-gray-400' : '')\n      }\n    >\n      <p ref={note} className=\"text-6xl\">\n        --\n      </p>\n      <p ref={freq} className=\"text-sl\">\n        -- Hz\n      </p>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport { BsMicFill, BsMicMuteFill } from 'react-icons/bs'\nimport { useHotkeys } from 'react-hotkeys-hook'\nimport { AudioWave } from '../components/AudioWave'\nimport { PitchDetector } from '../components/PitchDetector'\n\nconst Sight = () => {\n  const [listening, setListening] = useState(false)\n  const [audio, setAudio] = useState<{\n    stream: MediaStream | undefined\n    analyzer: AnalyserNode | undefined\n  }>()\n\n  useHotkeys('Space', () => setListening((pre) => !pre))\n\n  function mute() {\n    audio?.analyzer?.disconnect()\n    audio?.stream?.getTracks().forEach((t) => t.stop())\n    setAudio({\n      stream: undefined,\n      analyzer: undefined,\n    })\n  }\n\n  useEffect(() => {\n    if (!listening) {\n      mute()\n      return\n    }\n\n    navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n      const audioContext = new window.AudioContext()\n      const analyzer = new AnalyserNode(audioContext, {\n        // maxDecibels: -0,\n        // minDecibels: -60,\n        // fftSize: 4096,\n      })\n      audioContext.createMediaStreamSource(stream).connect(analyzer)\n      setAudio({\n        stream: stream,\n        analyzer: analyzer,\n      })\n    })\n\n    return mute\n  }, [listening])\n\n  return (\n    <div className=\"m-auto flex flex-col center items-center\">\n      <button\n        id=\"btn-play\"\n        className={\n          'text-6xl ' +\n          (!listening ? 'text-gray-400' : '') +\n          ' hover:text-cyan-500'\n        }\n        onMouseDown={() => setListening((pre) => !pre)}\n      >\n        {listening ? <BsMicMuteFill /> : <BsMicFill />}\n      </button>\n      <AudioWave analyzer={audio?.analyzer} samplingStep={10} />\n      <PitchDetector analyzer={audio?.analyzer} />\n\n      <article className=\"prose\">\n        <ul>\n          <li>\n            Press <kbd>Space</kbd> to toggle pitch detection via microphone.\n          </li>\n        </ul>\n      </article>\n    </div>\n  )\n}\n\nexport default Sight\n"],"names":["AudioWave","p","canvas","useRef","useEffect","ctx","current","getContext","analyzer","step","samplingStep","height","width","lineWidth","strokeStyle","visualize","clearRect","requestAnimationFrame","bufferLength","fftSize","data","Uint8Array","getByteTimeDomainData","beginPath","sliceWidth","x","i","y","moveTo","lineTo","stroke","draw","className","ref","notes","fromFrequency","freq","noteNum","Math","log","round","name","length","octave","ceil","detect","note","Float32Array","getFloatTimeDomainData","pitch","buffer","sampleRate","SIZE","sumOfSquares","val","sqrt","r1","r2","abs","slice","c","Array","fill","j","d","maxValue","maxIndex","T0","x1","x2","x3","a","autoCorrelate","context","Number","isNaN","innerText","Notes","toFixed","PitchDetector","useState","listening","setListening","audio","setAudio","mute","disconnect","stream","getTracks","forEach","t","stop","undefined","useHotkeys","pre","navigator","mediaDevices","getUserMedia","then","audioContext","window","AudioContext","AnalyserNode","createMediaStreamSource","connect","id","onMouseDown"],"sourceRoot":""}